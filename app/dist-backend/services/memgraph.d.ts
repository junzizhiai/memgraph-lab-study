/// <reference types="node" />
import { MemgraphQueryStream } from '../models/memgraph/query/engine';
import { MemgraphQueryResult } from '../shared/models/memgraph-query-result';
import { PassThrough } from 'stream';
import { MemgraphConnection, MemgraphConnectionInfo } from '../shared/models/memgraph-connection';
import { MemgraphIndex } from '../shared/models/memgraph-index';
import { MemgraphConstraint } from '../shared/models/memgraph-constraint';
import { MemgraphSchema } from '../shared/models/memgraph-schema';
import { IMemgraphStorageStatsOptions, MemgraphNodePropertyStats, MemgraphRelationshipPropertyStats, MemgraphStorageStats } from '../shared/models/memgraph-stats';
import { CreateMemgraphStream, MemgraphDetailedStream, MemgraphStream, MemgraphStreamDryRunOptions, MemgraphStreamDryRunResult } from '../shared/models/memgraph-stream';
import { CreateMemgraphModule, MemgraphModule, MemgraphModuleFunctionType, UpdateMemgraphModule } from '../shared/models/memgraph-module';
import { IDatasetInfoContext } from '../shared/models/dataset-info';
import { IMemgraphService } from '../shared/services/memgraph';
import { MemgraphWebSocketConnection } from '../models/memgraph/ws-connection';
import { INotification } from '../shared/models/notification';
import { MemgraphDatabase, MemgraphDatabaseChange } from '../shared/models/memgraph-database';
import { ILabChangelogVersion } from '../shared/models/lab-changelog';
import { ILlmAzureVerificationRequest, ILlmOllamaVerificationRequest, ILlmOpenAIVerificationRequest, ILlmRequest, ILlmVerificationResponse, IMemgraphTextQueryResult } from '../shared/models/llm';
export interface IMemgraphServiceInfo {
    ipAddress?: string;
}
export declare class MemgraphService implements IMemgraphService {
    private connection;
    private wsConnection;
    private llmConnection;
    private _connectionInfo;
    lastQueryAt: number;
    constructor();
    get connectionInfo(): MemgraphConnectionInfo | null;
    checkConnection(connectionConfig?: MemgraphConnection): Promise<boolean>;
    createConnection(connectionConfig?: MemgraphConnection): Promise<MemgraphConnectionInfo>;
    private upsertLlmConnection;
    runTextQuery(llmRequest: ILlmRequest): Promise<IMemgraphTextQueryResult>;
    verifyOpenAISetup(credentials: ILlmOpenAIVerificationRequest): Promise<ILlmVerificationResponse>;
    verifyAzureOpenAISetup(credentials: ILlmAzureVerificationRequest): Promise<ILlmVerificationResponse>;
    verifyOllamaSetup(setup: ILlmOllamaVerificationRequest): Promise<ILlmVerificationResponse>;
    private getConnection;
    getWSConnection(): MemgraphWebSocketConnection;
    getServiceInfo(): Promise<IMemgraphServiceInfo>;
    getDatasets(): Promise<IDatasetInfoContext>;
    getDataset(slug: string): Promise<PassThrough>;
    getDatasetContent(slug: string): Promise<string>;
    getSchema(): Promise<MemgraphSchema>;
    getStorageStats(options?: Partial<IMemgraphStorageStatsOptions>): Promise<MemgraphStorageStats>;
    getNodesPropertyStats(): Promise<MemgraphNodePropertyStats[]>;
    getRelationshipsPropertyStats(): Promise<MemgraphRelationshipPropertyStats[]>;
    getStreams(): Promise<MemgraphStream[]>;
    getStream(streamName: string): Promise<MemgraphDetailedStream>;
    createStream(stream: CreateMemgraphStream): Promise<MemgraphDetailedStream>;
    checkStream(streamName: string, options?: MemgraphStreamDryRunOptions): Promise<MemgraphStreamDryRunResult[]>;
    stopStream(streamName: string): Promise<void>;
    startStream(streamName: string): Promise<void>;
    removeStream(streamName: string): Promise<void>;
    getModules(functionType?: MemgraphModuleFunctionType): Promise<MemgraphModule[]>;
    getModule(moduleName: string): Promise<MemgraphModule>;
    createModule(module: CreateMemgraphModule): Promise<MemgraphModule>;
    updateModule(moduleName: string, module: UpdateMemgraphModule): Promise<MemgraphModule>;
    removeModule(moduleName: string): Promise<void>;
    getIndexes(): Promise<MemgraphIndex[]>;
    createIndex(index: MemgraphIndex): Promise<MemgraphIndex>;
    removeIndex(index: MemgraphIndex): Promise<void>;
    removeIndexes(): Promise<void>;
    getConstraints(): Promise<MemgraphConstraint[]>;
    createConstraint(constraint: MemgraphConstraint): Promise<MemgraphConstraint>;
    removeConstraint(constraint: MemgraphConstraint): Promise<void>;
    removeConstraints(): Promise<void>;
    runQuery(query: string, params?: Record<string, any>, metadata?: Record<string, any>): Promise<MemgraphQueryResult>;
    getTransactions(): Promise<import("../shared/models/memgraph-transaction").IMemgraphTransaction[]>;
    terminateTransaction(transactionId: string): Promise<import("../shared/models/memgraph-transaction").IMemgraphTransactionTerminate>;
    getDatabases(): Promise<MemgraphDatabase[]>;
    useDatabase(databaseName: string): Promise<MemgraphDatabaseChange>;
    loadDatabase(queries: Array<string>): Promise<void>;
    dropDatabase(): Promise<void>;
    dumpDatabase(): MemgraphQueryStream;
    getNotifications(sessionId: string): Promise<INotification[]>;
    markNotificationsAsSeen(sessionId: string): Promise<void>;
    getVersions(): Promise<ILabChangelogVersion[]>;
    closeConnection(): Promise<void>;
    isConnected(): boolean;
    isConnectionActive(): Promise<boolean>;
}
export default MemgraphService;
