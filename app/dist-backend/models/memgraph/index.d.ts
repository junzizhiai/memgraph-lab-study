import { IMemgraph, IMemgraphConnectOptions } from './interface';
import { MemgraphQueryEngine, MemgraphQueryStream } from './query/engine';
import { IMemgraphQueryCommandWrapperConfig } from './query/command';
import { MemgraphConnection } from '../../shared/models/memgraph-connection';
import { MemgraphIndex } from '../../shared/models/memgraph-index';
import { MemgraphConstraint } from '../../shared/models/memgraph-constraint';
import { MemgraphSchema } from '../../shared/models/memgraph-schema';
import { IMemgraphStorageStatsOptions, MemgraphNodePropertyStats, MemgraphRelationshipPropertyStats, MemgraphStorageStats } from '../../shared/models/memgraph-stats';
import { CreateMemgraphStream, MemgraphDetailedStream, MemgraphStream, MemgraphStreamDryRunOptions, MemgraphStreamDryRunResult } from '../../shared/models/memgraph-stream';
import { CreateMemgraphModule, MemgraphModule, MemgraphModuleFunctionType, UpdateMemgraphModule } from '../../shared/models/memgraph-module';
import { MemgraphFeature } from '../../shared/models/memgraph-feature';
import { MemgraphQueryServerType } from '../../shared/models/memgraph-query-result';
import { MemgraphDatabase } from '../../shared/models/memgraph-database';
import { MemgraphTrigger } from '../../shared/models/memgraph-trigger';
import { IMemgraphTransaction, IMemgraphTransactionTerminate } from '../../shared/models/memgraph-transaction';
export declare class Memgraph implements IMemgraph {
    readonly host: string;
    readonly port: number;
    readonly wsPort: number;
    readonly uri: string;
    readonly isEncrypted: boolean;
    databaseName?: string;
    serverType: MemgraphQueryServerType;
    serverId?: string;
    serverVersion?: string;
    private readonly auth;
    private driver;
    private readonly isFeatureSupported;
    private _username?;
    constructor(connection?: MemgraphConnection);
    get fullUri(): string;
    get username(): string | undefined;
    connect(options?: Partial<IMemgraphConnectOptions>): Promise<void>;
    getSupportedFeatures(): MemgraphFeature[];
    private updateSupportedFeatures;
    disconnect(): Promise<void>;
    isConnectionActive(): Promise<boolean>;
    getVersion(): Promise<string | undefined>;
    getStorageStats(options?: Partial<IMemgraphStorageStatsOptions>): Promise<MemgraphStorageStats>;
    getRoughStorageStats(): Promise<MemgraphStorageStats>;
    getSchema(): Promise<MemgraphSchema>;
    getNodesPropertyStats(): Promise<MemgraphNodePropertyStats[]>;
    getRelationshipsPropertyStats(): Promise<MemgraphRelationshipPropertyStats[]>;
    getModules(functionType?: MemgraphModuleFunctionType): Promise<MemgraphModule[]>;
    private getDefaultModuleTypes;
    isModuleAvailable(moduleName: string): Promise<boolean>;
    getModule(moduleName: string): Promise<MemgraphModule>;
    getModuleContent(modulePath: string): Promise<string | undefined>;
    reloadModule(moduleName: string): Promise<void>;
    reloadAllModules(): Promise<void>;
    createModule(module: CreateMemgraphModule): Promise<MemgraphModule>;
    updateModule(moduleName: string, module: UpdateMemgraphModule): Promise<MemgraphModule>;
    removeModule(moduleName: string): Promise<void>;
    private getModulesByFilename;
    private groupModuleFunctions;
    private getModuleFunctions;
    getStreams(): Promise<MemgraphStream[]>;
    getStream(streamName: string): Promise<MemgraphDetailedStream>;
    createStream(stream: CreateMemgraphStream): Promise<MemgraphDetailedStream>;
    checkStream(streamName: string, options?: MemgraphStreamDryRunOptions): Promise<MemgraphStreamDryRunResult[]>;
    startStream(streamName: string): Promise<void>;
    stopStream(streamName: string): Promise<void>;
    removeStream(streamName: string): Promise<void>;
    getIndexes(): Promise<MemgraphIndex[]>;
    createIndex(index: MemgraphIndex): Promise<MemgraphIndex>;
    removeIndex(index: MemgraphIndex): Promise<void>;
    removeIndexes(): Promise<void>;
    getConstraints(): Promise<MemgraphConstraint[]>;
    createConstraint(constraint: MemgraphConstraint): Promise<MemgraphConstraint>;
    removeConstraint(constraint: MemgraphConstraint): Promise<void>;
    removeConstraints(): Promise<void>;
    getTriggers(): Promise<MemgraphTrigger[]>;
    dropData(): Promise<void>;
    dropDatabase(): Promise<void>;
    getDatabases(): Promise<MemgraphDatabase[]>;
    useDatabase(databaseName: string): Promise<void>;
    loadDatabase(queries: string[]): Promise<void>;
    dumpDatabase(): MemgraphQueryStream;
    query(query: string, options?: IMemgraphQueryCommandWrapperConfig): MemgraphQueryEngine;
    getTransactions(): Promise<IMemgraphTransaction[]>;
    terminateTransaction(transactionId: string): Promise<IMemgraphTransactionTerminate>;
    runTestQuery(): Promise<void>;
    countNodes(): Promise<number>;
    countEdges(): Promise<number>;
    getCurrentUser(): Promise<string | undefined>;
}
export default Memgraph;
